/*! \brief record structure type
 *  \author Shylock Hg
 *  \date 2018-06-25
 *  \email tcath2s@gmail.com
 * */

#ifndef _AT_XRECORD_H_
#define _AT_XRECORD_H_

#ifdef __cplusplus
        extern "C" {
#endif

#include "./at_command.h"

///!< \defgroup at_xrecord_prototype
/// @{

/*! \brief record structure of standard at command record
 *  \note this should be used as list node and generated by FSM
 * */
typedef struct at_cmd_xrecord {
        //!< at command name "+NAME"
        char  name[AT_CMD_MAX_NAME_LEN];
        //!< at command parameter only for `exec with parameter`
        char  param[AT_CMD_MAX_PARAM_LEN];
        //!< at command type `query` , `exec without parameter` ...
        enum AT_CMD_INDEX type;
} at_cmd_xrecord_t;

/// @}

///!< \defgroup at_xrecord_prototype
/// @{

/*! \brief create a xrecord from at command base information
 *  \param name at command name "+TEST"
 *  \param param at command param "+TEST=hello\r\n"
 *  \type at command type same as at command callback function index in store
 *  \retval created xrecord
 * */
at_cmd_xrecord_t * at_cmd_xrecord_new(const char * name,
        const char * param, enum AT_CMD_INDEX type);

/*! \brief release a xrecord
 *  \param xrecord xrecord to release
 * */
void at_cmd_xrecord_release(at_cmd_xrecord_t * xrecord);

/*! \brief deinit a xrecord 
 *  \param xrecord xrecord to de-initialize
 * */
void at_cmd_xrecord_deinit(at_cmd_xrecord_t * xrecord);


/// @}

#ifdef __cplusplus
        }
#endif

#endif  //!< _AT_XRECORD_H_
